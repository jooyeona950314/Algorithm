1. 주석을 먼저 작성하자
   : 프로그램과 프로시저를 만들 때는 우선 어던 작업을 처리하기 위한 것인지 설명하는 내용을 적어두는 것부터 시작하자. 주석을 제대로 달 수 없다는 것은 그 프로그램에서 해야 하는 일을 제대로 이해하지 못한다는 것을 의미하기 때문에 이런 작업이 매우 중요하다. 프로그램을 디버깅하는 것보다는 주석을 디버깅하는 것이 훨씬 편하고, 주석을 입력하는 데 들어가는 시간은 정말 중요한 투자라고 봐야 한다.

2. 모든 변수에 설명을 붙이자
   : 변수를 선언할 때는 그 변수가 어떤 용도로 쓰이는지 알 수 있도록 한줄씩의 주석을 작성하자. 그 변수의 역할을 제대로 설명할 수 없다면 그 변수가 왜 필요한지 제대로 인해하지 못하는 것이라고 볼 수 있다. 프로그램을 작성하다 보면 적오도 몇 번 디버깅하는 동안 그 프로그램을 붙들고 있어야 할 텐데, 그러다보면 모든 변수에 주석을 달아놓는 작은 투자가 프로그램을 다시 읽을 때 얼마나 도움이 되는지 확실히 깨달을 수 있다.

3. 기호 상수를 사용하자
   : 프로그램에서 상수를 사용할 때 반드시 프로그램 맨 위에서 선언하자. 프로그램에서 상수에 일관성이 없으면 아주 골치 아픈 오류가 생길 수 있다. 물론 이렇게 상수에 이름을 붙여놓고 나면 상수가 필요할 때 마다 반드시 그 이름을 이용해서 상수를 사용해야만 도움이 된다는 점을 잊지 말자.

4. 열거형을 쓸 때는 꼭 필요한지 다시 한번 생각해보자
   : 열거형을 사용하면 코드를 이해하는 데 크게 도움이 될 수 있다. 하지만 짧은 프로그램에서는 불필요한 경우가 많다.

5. 서브루틴을 써서 코드가 중복되지 않게 하자
   : 실제 프로그램에서는 옆 칸으로 칸을 옮기는 세 줄짜리 블록이 네 개 들어있었다. 그런데 여기에서 +나 -를 입력할 때 하나라도 틀리면 치명적인 결과가 나올 수 있다. 따라서 값을 다른 칸으로 옮기는 루틴을 하나 만들어놓고 적당한 인자를 넘겨주면서 호출하는 방법을 사용하는 편이 훨씬 안전하다.

6. 디버깅 구문도 의미 있게 만들자
   : 시스템에 있는 디버깅 환경을 사용하는 방법을 배우자. 디버깅 환경을 사용하면 특정 구문이나 조건에 따라서 실행을 멈추고 관련 변수의 값을 모두 확인해볼 수 있다. 보통 출력 선언문을 잔뜩 타이핑해서 실행시키는 것보다는 이 방법이 낫다. 하지만 디버깅 용도의 출력 선언문을 코드에 직접 집어넣고 싶다면 뭔가 의미가 있는 내용을 출력하게 만들자. 디버깅에 필요한 모든 변수를 변수 이름과 함께 출력하자. 이렇게 하지 않으면 자신이 만든 디버깅 출력 구문을 보면서도 뭐가 뭔지 파악하기가 힘들 수 있다.

